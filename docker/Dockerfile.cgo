# Credit to this blog post for the method to build a CGO application minimally:
# https://blog.2read.net/posts/building-a-minimalist-docker-container-with-alpine-linux-and-golang/

FROM golang:alpine AS builder

ARG VERSION=dev
ARG COMMIT=none
ARG BUILD_DATE=unknown

RUN apk add --no-cache build-base

WORKDIR /build

COPY go.mod go.sum ./
RUN go mod download

COPY . .

ARG DIST_DIR=/dist

RUN LDFLAGS="-X 'main.Version=${VERSION}' -X 'main.Commit=${COMMIT}' -X 'main.BuildDate=${BUILD_DATE}'" && \
    CGO_ENABLED=1 go build -ldflags="${LDFLAGS} -s -w" -trimpath -o ${DIST_DIR}/sarracenia ./cmd/main

RUN ldd ${DIST_DIR}/sarracenia | tr -s '[:blank:]' '\n' | grep '^/' | \
    xargs -I % sh -c 'mkdir -p $(dirname ${DIST_DIR}/%); cp % ${DIST_DIR}/%;'

FROM scratch

COPY --from=builder /dist/ /

WORKDIR /app

COPY ./example /app

EXPOSE 7277 7278

CMD ["/sarracenia"]
