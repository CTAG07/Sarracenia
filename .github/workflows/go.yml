name: Sarracenia Test / Build / Release

on:
  push:
    tags: [ 'v*.*.*' ]

jobs:
  test:
    name: Run Go Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Run Go Tests
        run: go test -v ./...

  build-and-push-docker:
    name: Build and Push Docker Image to GHCR
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set repository name to lowercase
        id: string
        run: INPUT=${{ github.repository }}; echo "repo_lc=${INPUT,,}">>${GITHUB_OUTPUT}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ACTIONS_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.string.outputs.repo_lc }}
          tags: |
            # Create tags based on the git tag: v1.2.3, v1.2, and latest
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=true

      - name: Get Commit SHA
        id: commit
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Get current date
        id: date
        run: echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push (Native)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile.native
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            COMMIT=${{ steps.commit.outputs.sha }}
            BUILD_DATE=${{ steps.date.outputs.date }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push (CGO)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile.cgo
          push: true
          tags: |
            ghcr.io/${{ steps.string.outputs.repo_lc }}:${{ steps.meta.outputs.version }}-cgo
            ghcr.io/${{ steps.string.outputs.repo_lc }}:latest-cgo
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            COMMIT=${{ steps.commit.outputs.sha }}
            BUILD_DATE=${{ steps.date.outputs.date }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Build Release Binaries
        run: |
          mkdir release-assets
          VERSION=${{ github.ref_name }}
          COMMIT=${{ github.sha }}
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          LDFLAGS="-X 'main.Version=${VERSION}' -X 'main.Commit=${COMMIT}' -X 'main.BuildDate=${BUILD_DATE}'"
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="${LDFLAGS} -s -w" -o ./release-assets/sarracenia-linux-amd64 ./cmd/main
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags="${LDFLAGS} -s -w" -o ./release-assets/sarracenia-linux-arm64 ./cmd/main
          CGO_ENABLED=0 GOOS=linux GOARM=7 GOARCH=arm go build -ldflags="${LDFLAGS} -s -w" -o ./release-assets/sarracenia-linux-armv7 ./cmd/main
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags="${LDFLAGS} -s -w" -o ./release-assets/sarracenia-windows-amd64.exe ./cmd/main
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags="${LDFLAGS} -s -w" -o ./release-assets/sarracenia-darwin-amd64 ./cmd/main
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags="${LDFLAGS} -s -w" -o ./release-assets/sarracenia-darwin-arm64 ./cmd/main
          CGO_ENABLED=0 GOOS=windows GOARCH=arm64 go build -ldflags="${LDFLAGS} -s -w" -o ./release-assets/sarracenia-windows-arm64.exe ./cmd/main

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: ./release-assets/*
          draft: false
          generate_release_notes: true
