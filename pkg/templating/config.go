package templating

// TemplateConfig holds all configuration options for the templating engine.
// It provides granular control over the generated content, including safety
// limits for computationally expensive functions to prevent abuse and ensure
// stability for both the server and the client's browser.
type TemplateConfig struct {
	// MarkovEnabled controls whether the `markov` template functions will use the
	// markov generator for content generation. If false, they fall back to using
	// the `random` functions.
	MarkovEnabled bool `json:"markov_enabled"`

	// MarkovSeparator sets the separator to be used by the markov tokenizer. (optional)
	MarkovSeparator string `json:"markov_separator"`

	// MarkovEoc sets the eoc to be used by the markov tokenizer. (optional)
	MarkovEoc string `json:"markov_eoc"`

	// MarkovSplitRegex sets the regex to be used by the markov tokenizer for splitting tokens. (optional)
	MarkovSplitRegex string `json:"markov_split_regex"`

	// MarkovEocRegex sets the regex to be used by the markov tokenizer for detecting EOC tokens. (optional)
	MarkovEocRegex string `json:"markov_eoc_regex"`

	// MarkovSeparatorExcRegex sets the regex to be used by the markov tokenizer for determining which tokens should
	// not have a separator put in front of them. (optional)
	MarkovSeparatorExcRegex string `json:"markov_separator_exc_regex"`

	// MarkovEocExcRegex sets the regex to be used by the markov tokenizer for determining which tokens should not
	// have an EOC token put after them. (optional)
	MarkovEocExcRegex string `json:"markov_eoc_exc_regex"`

	// PathWhitelist is a list of URL paths that are considered safe and should not
	// be used for randomly generated links (e.g., "/api", "/admin"). This prevents
	// collisions with real application endpoints.
	PathWhitelist []string `json:"path_whitelist"`

	// MinSubpaths defines the minimum number of segments in a generated URL path.
	MinSubpaths int `json:"min_subpaths"`

	// MaxSubpaths defines the maximum number of segments in a generated URL path.
	MaxSubpaths int `json:"max_subpaths"`

	// MaxJSONDepth sets a hard upper limit on the recursion depth for the randomJSON function.
	MaxJSONDepth int `json:"max_json_depth"`

	// MaxNestDivs sets a hard upper limit on the recursion depth for the nestDivs function.
	// This prevents templates from requesting a depth that could crash a browser.
	MaxNestDivs int `json:"max_nest_divs"`

	// MaxTableRows sets the maximum number of rows for the randomComplexTable function.
	MaxTableRows int `json:"max_table_rows"`

	// MaxTableCols sets the maximum number of columns for the randomComplexTable function.
	MaxTableCols int `json:"max_table_cols"`

	// MaxFormFields sets the maximum number of fields for the randomForm function.
	MaxFormFields int `json:"max_form_fields"`

	// MaxStyleRules sets the maximum number of complex CSS rules generated by the
	// randomStyleBlock function.
	MaxStyleRules int `json:"max_style_rules"`

	// MaxCssVars sets the maximum number of interdependent CSS custom properties
	// generated by the randomCSSVars function.
	MaxCssVars int `json:"max_css_vars"`

	// MaxSvgElements sets a general limit for the complexity of generated SVGs,
	// such as the recursion depth for fractals or the number of filter primitives.
	MaxSvgElements int `json:"max_svg_elements"`

	// MaxJsContentSize sets the maximum size in bytes of the content to be encoded
	// and rendered by the jsInteractiveContent function.
	MaxJsContentSize int `json:"max_js_content_size"`

	// MaxJsWasteCycles sets the maximum number of iterations for the CPU waste
	// loop within the jsInteractiveContent function.
	MaxJsWasteCycles int `json:"max_js_waste_cycles"`
}

// DefaultConfig returns a new TemplateConfig populated with safe, sensible default values.
// The PathWhitelist is empty by default, assuming that any non-API path will serve tarpit content.
func DefaultConfig() *TemplateConfig {
	return &TemplateConfig{
		MarkovEnabled:           false,
		MarkovSeparator:         "",
		MarkovEoc:               "",
		MarkovSplitRegex:        "",
		MarkovEocRegex:          "",
		MarkovSeparatorExcRegex: "",
		MarkovEocExcRegex:       "",
		PathWhitelist:           []string{},
		MinSubpaths:             1,
		MaxSubpaths:             5,
		MaxJSONDepth:            8,
		MaxNestDivs:             50,
		MaxTableRows:            100,
		MaxTableCols:            50,
		MaxFormFields:           75,
		MaxStyleRules:           200,
		MaxCssVars:              100,
		MaxSvgElements:          7,
		MaxJsContentSize:        1048576, // 1MB
		MaxJsWasteCycles:        1_000_000,
	}
}
